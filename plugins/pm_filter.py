# Kanged From @TroJanZheX
import asyncio
import re
import ast
import math
from pyrogram.errors.exceptions.bad_request_400 import MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty
from Script import script
import pyrogram
from database.connections_mdb import active_connection, all_connections, delete_connection, if_active, make_active, \
    make_inactive
from info import ADMINS, AUTH_CHANNEL, AUTH_USERS, CUSTOM_FILE_CAPTION, AUTH_GROUPS, P_TTI_SHOW_OFF, IMDB, \
    SINGLE_BUTTON, SPELL_CHECK_REPLY, IMDB_TEMPLATE
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram import Client, filters, enums
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from utils import get_size, is_subscribed, get_poster, search_gagala, temp, get_settings, save_group_settings
from database.users_chats_db import db
from database.ia_filterdb import Media, get_file_details, get_search_results
from database.filters_mdb import (
    del_all,
    find_filter,
    get_filters,
)
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.ERROR)

BUTTONS = {}
SPELL_CHECK = {}


@Client.on_message(filters.group & filters.text & filters.incoming)
async def give_filter(client, message):
    k = await manual_filters(client, message)
    if k == False:
        await auto_filter(client, message)


@Client.on_callback_query(filters.regex(r"^next"))
async def next_page(bot, query):
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer(f"‚òÖÂΩ°Hey {query.from_user.first_name}ÂΩ°‚òÖ ‡¥á‡¥§‡µç ‡¥®‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥Ö‡¥≤‡µç‡¥≤ ....üòé", show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    search = BUTTONS.get(key)
    if not search:
        await query.answer("You are using one of my old messages, please send the request again.", show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    settings = await get_settings(query.message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚ñ´ {get_size(file.file_size)} ‚ñ∏ {file.file_name}", callback_data=f'files#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=f'files#{file.file_id}'
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'files_#{file.file_id}',
                ),
            ]
            for file in files
        ]
        
    if 0 < offset <= 10:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 10
    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton("‚á¶ ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
             InlineKeyboardButton(f"‚éô ·¥ò·¥Ä…¢·¥ás„Äê {math.ceil(int(offset) / 10) + 1} - {math.ceil(total / 10)} „Äë",
                                  callback_data="pages")]
        )
        btn.append(
            [InlineKeyboardButton("„ÄÑ ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ „ÄÑ",callback_data="seriess")]
        )
        btn.insert(0,
            [InlineKeyboardButton(f"‚á© {search} ‚á©",callback_data="neosub")]
        )          
    elif off_set is None:
        btn.append(
            [InlineKeyboardButton(f"„Äê {math.ceil(int(offset) / 10) + 1} - {math.ceil(total / 10)} „Äë", callback_data="pages"),
             InlineKeyboardButton("…¥·¥áx·¥õ‚û™", callback_data=f"next_{req}_{key}_{n_offset}")])
        btn.append([InlineKeyboardButton("„ÄÑ ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ „ÄÑ",callback_data="seriess")])
        btn.insert(0,
            [InlineKeyboardButton(f"‚á© {search} ‚á©",callback_data="neosub")]
        )                     
    else:
        btn.append(
            [
                InlineKeyboardButton("‚á¶ ô·¥Ä·¥Ñ·¥ã", callback_data=f"next_{req}_{key}_{off_set}"),
                InlineKeyboardButton(f"„Äê {math.ceil(int(offset) / 10) + 1} - {math.ceil(total / 10)} „Äë", callback_data="pages"),
                InlineKeyboardButton("…¥·¥áx·¥õ‚û™", callback_data=f"next_{req}_{key}_{n_offset}")
            ],
        )
        btn.append(
            [InlineKeyboardButton("„ÄÑ ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ „ÄÑ",callback_data="seriess")]
        )
        btn.insert(0,
            [InlineKeyboardButton(f"‚á© {search} ‚á©",callback_data="neosub")]
        )         
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer()


@Client.on_callback_query(filters.regex(r"^spolling"))
async def advantage_spoll_choker(bot, query):
    _, user, movie_ = query.data.split('#')
    if int(user) != 0 and query.from_user.id != int(user):
        return await query.answer("‚òÖÂΩ°Hey Bro, ‡¥®‡¥ø‡¥®‡¥ï‡µç‡¥ï‡µç ‡¥à ‡¥∏‡¥ø‡¥®‡¥ø‡¥Æ ‡¥µ‡µá‡¥£‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥®‡µÄ ‡¥§‡¥®‡µç‡¥®‡µÜ ‡¥±‡¥ø‡¥ï‡µç‡¥µ‡¥∏‡µç‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥£‡¥Çü§¶‚Äç‚ôÇ\n\n Ä·¥á«´·¥ú·¥ás·¥õ  è·¥è·¥ú Ä ·¥è·¥°…¥ üíï", show_alert=True)
    if movie_ == "close_spellcheck":
        return await query.message.delete()
    movies = SPELL_CHECK.get(query.message.reply_to_message.id)
    if not movies:
        return await query.answer("You are clicking on an old button which is expired.", show_alert=True)
    movie = movies[(int(movie_))]
    await query.answer('üîç ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ.. Íú∞…™…¥·¥Ö…™…¥…¢!...', show_alert=True)
    k = await manual_filters(bot, query.message, text=movie)
    if k == False:
        files, offset, total_results = await get_search_results(movie, offset=0, filter=True)
        if files:
            k = (movie, files, offset, total_results)
            await auto_filter(bot, query, k)
        else:                
            btn = [[
            InlineKeyboardButton('‚å¨ ùó•ùóòùóîùó¶ùó¢ùó°ùó¶ ‚å¨', callback_data='reqst11')
        ]]        
            k=await query.message.edit('<b>‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥ö‡µã‡¥¶‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥±‡¥ø‡¥≤‡µÄ‡¥∏‡µç ‡¥Ü‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µã..? </b>\n\n<b>üìØ…¥ ô: C ü…™·¥Ñ·¥ã B·¥á ü·¥è·¥° R·¥á·¥Äs·¥è…¥s B·¥ú·¥õ·¥õ·¥è…¥</b>', reply_markup=InlineKeyboardMarkup(btn))    
            await asyncio.sleep(60)
            await k.delete()

@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            grpid = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("Make sure I'm present in your group!!", quote=True)
                    return await query.answer('Piracy Is Crime')
            else:
                await query.message.edit_text(
                    "I'm not connected to any groups!\nCheck /connections or connect to any groups",
                    quote=True
                )
                return await query.answer('Piracy Is Crime')

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return await query.answer('Piracy Is Crime')

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("You need to be Group Owner or an Auth User to do that!", show_alert=True)
    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == enums.ChatType.PRIVATE:
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == enums.ChatMemberStatus.OWNER) or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("That's not for you!!", show_alert=True)
    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        act = query.data.split(":")[2]
        hr = await client.get_chat(int(group_id))
        title = hr.title
        user_id = query.from_user.id

        if act == "":
            stat = "CONNECT"
            cb = "connectcb"
        else:
            stat = "DISCONNECT"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}"),
             InlineKeyboardButton("DELETE", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton("BACK", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"Group Name : **{title}**\nGroup ID : `{group_id}`",
            reply_markup=keyboard,
            parse_mode=enums.ParseMode.MARKDOWN
        )
        return await query.answer('Piracy Is Crime')
    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title

        user_id = query.from_user.id

        mkact = await make_active(str(user_id), str(group_id))

        if mkact:
            await query.message.edit_text(
                f"Connected to **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text('Some error occurred!!', parse_mode=enums.ParseMode.MARKDOWN)
        return await query.answer('Piracy Is Crime')
    elif "disconnect" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]

        hr = await client.get_chat(int(group_id))

        title = hr.title
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"Disconnected from **{title}**",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('Piracy Is Crime')
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "Successfully deleted connection"
            )
        else:
            await query.message.edit_text(
                f"Some error occurred!!",
                parse_mode=enums.ParseMode.MARKDOWN
            )
        return await query.answer('Piracy Is Crime')
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "There are no active connections!! Connect to some groups first.",
            )
            return await query.answer('Piracy Is Crime')
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = " - ACTIVE" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Your connected group details ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert, show_alert=True)
    if query.data.startswith("file"):
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.caption
        settings = await get_settings(query.message.chat.id)
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
            f_caption = f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"
        buttons = [[
            InlineKeyboardButton('ñ£ò ùó†ùó¢ùó©ùóúùóòùó¶ ùóöùó•ùó¢ùó®ùó£ ñ£ò', url='https://t.me/new_movies_group_2021')
         ]]
        try:
            if AUTH_CHANNEL and not await is_subscribed(client, query):
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            elif settings['botpm']:
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
                return
            else:
                await client.send_cached_media(
                    chat_id=query.from_user.id,
                    file_id=file_id,
                    caption=f_caption,
                    reply_markup=InlineKeyboardMarkup(buttons),
                    protect_content=True if ident == "filep" else False 
                )
                await query.answer('‚òÖÂΩ°Hey Bruh..ÂΩ°‚òÖ\n\n‚úØ ‡¥Æ‡µÇ‡¥µ‡¥ø‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥´‡¥Ø‡µΩ ‚Äç‚Äç‡¥û‡¥æ‡¥®‡µç‚Äç pm ‡¥á‡µΩ ‡¥á‡¥ü‡µç‡¥ü‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥£‡µç‡¥ü‡µç ‡¥™‡µã‡¥Ø‡¥ø ‡¥®‡µã‡¥ï‡µç‡¥ï‡µç..üèÉ\n\n‚úØ ùñ® ùóÅùñ∫ùóèùñæ ùóâùóéùóç ùóçùóÅùñæ ùñøùóÇùóÖùñæ ùóàùñø ùóçùóÅùñæ ùóÜùóàùóèùóÇùñæ ùñ∫ùóå ùñ∫ ùóâùóÜ. ùñ¶ùóà ùñ†ùóáùñΩ ùñ≤ùñæùñæ', show_alert=True)
        except UserIsBlocked:
            await query.answer('Unblock the bot mahn !', show_alert=True)
        except PeerIdInvalid:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
        except Exception as e:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={ident}_{file_id}")
    elif query.data.startswith("checksub"):
        if AUTH_CHANNEL and not await is_subscribed(client, query):
            await query.answer(f"Hey {query.from_user.first_name} I Like Your Smartness, But Don't Be Oversmart üòí‡¥í‡¥®‡µç‡¥®‡µç ‡¥ú‡µã‡¥Ø‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥ü‡¥æ ‡¥â‡¥µ‡µç‡¥µ‡µá.. ‡¥û‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥ú‡µÄ‡¥µ‡¥ø‡¥ö‡µç‡¥ö‡µÅ ‡¥™‡µä‡¥ï‡µç‡¥ï‡µã‡¥ü‡µç‡¥ü‡µÜüòí", show_alert=True)
            return
        ident, file_id = query.data.split("#")
        files_ = await get_file_details(file_id)
        if not files_:
            return await query.answer('No such file exist.')
        files = files_[0]
        title = files.file_name
        size = get_size(files.file_size)
        f_caption = files.caption
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption = CUSTOM_FILE_CAPTION.format(file_name='' if title is None else title,
                                                       file_size='' if size is None else size,
                                                       file_caption='' if f_caption is None else f_caption)
            except Exception as e:
                logger.exception(e)
                f_caption = f_caption
        if f_caption is None:
            f_caption = f"{title}"
        buttons = [[
            InlineKeyboardButton('ñ£ò ùó†ùó¢ùó©ùóúùóòùó¶ ùóöùó•ùó¢ùó®ùó£ ñ£ò', url='https://t.me/new_movies_group_2021')
         ]]
        await query.answer()
        await client.send_cached_media(
            chat_id=query.from_user.id,
            file_id=file_id,
            caption=f_caption,
            reply_markup=InlineKeyboardMarkup(buttons),
            protect_content=True if ident == 'checksubp' else False
        )
    elif query.data == "pages":
        await query.answer()
    elif query.data == "start":
        buttons = [[
            InlineKeyboardButton('‚ûï A·¥Ö·¥Ö M·¥á T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò ‚ûï', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
            ],[
            InlineKeyboardButton('ùó†ùóîùóúùó° ùóöùó•ùó¢ùó®ùó£', url='https://t.me/new_movies_group_2021'),
            InlineKeyboardButton('ùóöùó•ùó¢ùó®ùó£ ùóúùóú', url='https://t.me/movies_club_2020')
            ],[
            InlineKeyboardButton('ùñßùñæùóÖùóâ', callback_data='help'),
            InlineKeyboardButton('ùñ†ùñªùóàùóéùóç', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.START_TXT.format(query.from_user.mention, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        await query.answer('Piracy Is Crime')
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('Manual Filter', callback_data='manuelfilter'),
            InlineKeyboardButton('Auto Filter', callback_data='autofilter')
        ], [
            InlineKeyboardButton('Connection', callback_data='coct'),
            InlineKeyboardButton('Extra Mods', callback_data='extra')
        ], [
            InlineKeyboardButton('üè† Home', callback_data='start'),
            InlineKeyboardButton('üîÆ Status', callback_data='stats')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.HELP_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "about":
        buttons = [[
            InlineKeyboardButton('ü§ñ Updates', url='https://t.me/new_movies_group_2021'),
            InlineKeyboardButton('‚ô•Ô∏è Source', callback_data='source')
        ], [
            InlineKeyboardButton('üè† Home', callback_data='start'),
            InlineKeyboardButton('üîê Close', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ABOUT_TXT.format(temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "movieinfo":
        await query.answer("‚ö† …™…¥Íú∞·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ‚ö†\n\n·¥ÄÍú∞·¥õ·¥á Ä 20 ·¥ç…™…¥·¥ú·¥õ·¥á ·¥õ ú…™Íú± ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥°…™ ü ü  ô·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö\n\n…™Íú∞  è·¥è·¥ú ·¥Ö·¥è …¥·¥è·¥õ Íú±·¥á·¥á ·¥õ ú·¥á  Ä·¥á«´·¥ú·¥ás·¥õ·¥á·¥Ö ·¥ç·¥è·¥†…™·¥á / s·¥á Ä…™·¥ás Íú∞…™ ü·¥á,  ü·¥è·¥è·¥ã ·¥Ä·¥õ ·¥õ ú·¥á …¥·¥áx·¥õ ·¥ò·¥Ä…¢·¥á", show_alert=True)
    elif query.data == "movss":
        await query.answer("‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n·¥ç·¥è·¥†…™·¥á  Ä·¥á«´·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ\n‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n\n…¢·¥è ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á ‚û† ·¥õ è·¥ò·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ‚û† ·¥Ñ·¥è·¥ò è ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …¥·¥Ä·¥ç·¥á ‚û† ·¥ò·¥ÄÍú±·¥õ·¥á ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò\n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á : ·¥ã…¢Íú∞ ·¥Ñ ú·¥Ä·¥ò·¥õ·¥á Ä 2 2022\n\nüöØ ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á ‚û† ':(!,./)", show_alert=True)

    elif query.data == "moviis":  
        await query.answer("‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\nÍú±·¥á Ä…™·¥áÍú±  Ä·¥á«´·¥ú·¥áÍú±·¥õ Íú∞·¥è Ä·¥ç·¥Ä·¥õ\n‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ\n\n…¢·¥è ·¥õ·¥è …¢·¥è·¥è…¢ ü·¥á ‚û† ·¥õ è·¥ò·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ‚û† ·¥Ñ·¥è·¥ò è ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ …¥·¥Ä·¥ç·¥á ‚û† ·¥ò·¥ÄÍú±·¥õ·¥á ·¥õ ú…™Íú± …¢ Ä·¥è·¥ú·¥ò\n\n·¥áx·¥Ä·¥ç·¥ò ü·¥á :  ü·¥è·¥ã…™ S01E01\n\nüöØ ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á ‚û† ':(!,./)", show_alert=True)   

    elif query.data == "neosub": 
        await query.answer(f"‚úØ ‡¥§‡¥æ‡¥¥‡µÜ‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥¨‡¥ü‡µç‡¥ü‡¥£‡¥ø‡µΩ ‡¥µ‡µá‡¥£‡µç‡¥ü ‡¥ï‡µç‡¥µ‡¥æ‡¥≥‡¥ø‡¥±‡µç‡¥±‡¥ø ‡¥Ø‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡¥æ‡µΩ ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Ç‚ö°\n\n‚úØ ùñ¢ùóÖùóÇùñºùóÑ ùóàùóá ùóçùóÅùñæ ùóôùó∂ùóπùó≤ ùó°ùóÆùó∫ùó≤ ùñªùñæùóÖùóàùóê ùñªùóéùóçùóçùóàùóá üåà ùñ†ùóáùñΩ ùñ≤ùóçùñ∫ùóãùóç ùñ≥ùóÅùñæ ùñ°ùóàùóç üéØ",show_alert=True)

    elif query.data == "reqst11":
        await query.answer("‚úØ ùñ¢ùóÅùñæùñºùóÑ ùñÆùñ≥ùñ≥ ùñ±ùñæùóÖùñæùñ∫ùóåùñæ ·¥è Ä ùñ¢ùóàùóãùóãùñæùñºùóç ùñ≥ùóÅùñæ ùóåùóâùñæùóÖùóÖùóÇùóáùóÄ\n\n‚úØ ùñ£ùóàùóáùóç ùñ¥ùóåùñæ ùñ≤ùóíùóÜùñªùóàùóÖùóå ùñ∂ùóÅùóÇùóÖùñæ ùñ±ùñæùóäùóéùñæùóåùóç (,:'?!* ùñæùóçùñº..)\n\n‚úØ [ùñ¨ùóàùóèùóÇùñæ ùñ≠ùñ∫ùóÜùñæ ,ùñ∏ùñæùñ∫ùóã ,ùñ´ùñ∫ùóáùóÄùóéùñ∫ùóÄùñæ] ùñ†ùóåùóÑ ùñ≥ùóÅùóÇùóå ùñ∂ùñ∫ùóí",show_alert=True)        

    elif query.data == "seriess":
        await query.answer("‚úØ ùó¶ùòÅùó≤ùóΩ 1 :  ùñ≤ùñæùóáùñΩ ùóçùóÅùñæ ùóáùñ∫ùóÜùñæ ùóàùñø ùóçùóÅùñæ ùñ¨ùóàùóèùóÇùñæ ùóíùóàùóé ùóêùñ∫ùóáùóç ùóçùóà ùóçùóÅùóÇùóå ùóÄùóãùóàùóéùóâ\n\n‚úØ ùó¶ùòÅùó≤ùóΩ 2 : ùñ¢ùóÖùóÇùñºùóÑ ùóàùóá ùóçùóÅùñæ ùñ°ùóéùóçùóçùóàùóá ùóàùñø ùóçùóÅùñæ ùñ¨ùóàùóèùóÇùñæ ùóíùóàùóé ùóêùñ∫ùóáùóç\n\n‚úØ ùó¶ùòÅùó≤ùóΩ 3 : ùñ≥ùóÅùñæùóá ùñ¢ùóÖùóÇùñºùóÑ ùó¶ùòÅùóÆùóøùòÅ ùóàùóá ùóçùóÅùñæ ùñ°ùóàùóç ùñ∫ùóáùñΩ ùóíùóàùóé ùóêùóÇùóÖùóÖ ùóÄùñæùóç ùóçùóÅùñæ ùñ¨ùóàùóèùóÇùñæ",show_alert=True)      

    elif query.data == "tipss":
        await query.answer("ùñ¶ùóà ùóçùóà ùñ¶ùóàùóàùóÄùóÖùñæ ‚û™ ùñ∫ùóáùñΩ ùóçùóíùóâùñæ ùñºùóàùóãùóãùñæùñºùóç ùóåùóâùñæùóÖùóÖùóÇùóáùóÄ ‚úçÔ∏é",show_alert=True)        
    elif query.data == "source":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.SOURCE_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "manuelfilter":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='help'),
            InlineKeyboardButton('‚èπÔ∏è Buttons', callback_data='button')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.MANUELFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "button":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='manuelfilter')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.BUTTON_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "autofilter":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.AUTOFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "coct":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.CONNECTION_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "extra":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='help'),
            InlineKeyboardButton('üëÆ‚Äç‚ôÇÔ∏è Admin', callback_data='admin')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.EXTRAMOD_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "admin":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='extra')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.ADMIN_TXT,
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "stats":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='help'),
            InlineKeyboardButton('‚ôªÔ∏è', callback_data='rfrsh')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, monsize, free),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data == "rfrsh":
        await query.answer("Fetching MongoDb DataBase")
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø Back', callback_data='help'),
            InlineKeyboardButton('‚ôªÔ∏è', callback_data='rfrsh')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        total = await Media.count_documents()
        users = await db.total_users_count()
        chats = await db.total_chat_count()
        monsize = await db.get_db_size()
        free = 536870912 - monsize
        monsize = get_size(monsize)
        free = get_size(free)
        await query.message.edit_text(
            text=script.STATUS_TXT.format(total, users, chats, monsize, free),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
    elif query.data.startswith("setgs"):
        ident, set_type, status, grp_id = query.data.split("#")
        grpid = await active_connection(str(query.from_user.id))

        if str(grp_id) != str(grpid):
            await query.message.edit("Your Active Connection Has Been Changed. Go To /settings.")
            return await query.answer('Piracy Is Crime')

        if status == "True":
            await save_group_settings(grpid, set_type, False)
        else:
            await save_group_settings(grpid, set_type, True)

        settings = await get_settings(grpid)

        if settings is not None:
            buttons = [
                [
                    InlineKeyboardButton('Filter Button',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}'),
                    InlineKeyboardButton('Single' if settings["button"] else 'Double',
                                         callback_data=f'setgs#button#{settings["button"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Bot PM', callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["botpm"] else '‚ùå No',
                                         callback_data=f'setgs#botpm#{settings["botpm"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('File Secure',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["file_secure"] else '‚ùå No',
                                         callback_data=f'setgs#file_secure#{settings["file_secure"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('IMDB', callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["imdb"] else '‚ùå No',
                                         callback_data=f'setgs#imdb#{settings["imdb"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Spell Check',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["spell_check"] else '‚ùå No',
                                         callback_data=f'setgs#spell_check#{settings["spell_check"]}#{str(grp_id)}')
                ],
                [
                    InlineKeyboardButton('Welcome', callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}'),
                    InlineKeyboardButton('‚úÖ Yes' if settings["welcome"] else '‚ùå No',
                                         callback_data=f'setgs#welcome#{settings["welcome"]}#{str(grp_id)}')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(buttons)
            await query.message.edit_reply_markup(reply_markup)
    await query.answer('Piracy Is Crime')


async def auto_filter(client, msg, spoll=False):
    if not spoll:
        message = msg
        settings = await get_settings(message.chat.id)
        if message.text.startswith("/"): return  # ignore commands
        if re.findall("((^\/|^,|^!|^\.|^[\U0001F600-\U000E007F]).*)", message.text):
            return
        if 2 < len(message.text) < 100:
            search = message.text
            files, offset, total_results = await get_search_results(search.lower(), offset=0, filter=True)
            if not files:
                if settings["spell_check"]:
                    return await advantage_spell_chok(msg)
                else:
                    return
        else:
            return
    else:
        settings = await get_settings(msg.message.chat.id)
        message = msg.message.reply_to_message  # msg will be callback query
        search, files, offset, total_results = spoll
    pre = 'filep' if settings['file_secure'] else 'file'
    if settings["button"]:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"‚ñ´ {get_size(file.file_size)} ‚ñ∏ {file.file_name}", callback_data=f'{pre}#{file.file_id}'
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}",
                    callback_data=f'{pre}#{file.file_id}',
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=f'{pre}#{file.file_id}',
                ),
            ]
            for file in files
        ]

    if offset != "":
        key = f"{message.chat.id}-{message.id}"
        BUTTONS[key] = search
        req = message.from_user.id if message.from_user else 0
        btn.append(
            [InlineKeyboardButton(text=f"„Äê 1-{math.ceil(int(total_results) / 10)} „Äë", callback_data="pages"),
             InlineKeyboardButton(text="…¥·¥áx·¥õ‚û™", callback_data=f"next_{req}_{key}_{offset}")]
        )
        btn.append(
            [InlineKeyboardButton("„ÄÑ ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ „ÄÑ",callback_data="seriess")]
        )
        btn.insert(0,
            [InlineKeyboardButton(f"‚á© {search} ‚á©",callback_data="neosub")]
        )   
    else:
        btn.append(
             [InlineKeyboardButton("„ÄÑ ùô∑ùôæùöÜ ùöÉùôæ ùô≥ùôæùöÜùôΩùôªùôæùô∞ùô≥ ùôºùôæùöÖùô∏ùô¥ùöÇ „ÄÑ",callback_data="seriess")]
        )
        btn.insert(0,
            [InlineKeyboardButton(f"‚á© {search} ‚á©",callback_data="neosub")]
        )
        
    imdb = await get_poster(search, file=(files[0]).file_name) if settings["imdb"] else None
    TEMPLATE = settings['template']
    if imdb:
        cap = TEMPLATE.format(
            query=search,
            title=imdb['title'],
            votes=imdb['votes'],
            aka=imdb["aka"],
            seasons=imdb["seasons"],
            box_office=imdb['box_office'],
            localized_title=imdb['localized_title'],
            kind=imdb['kind'],
            imdb_id=imdb["imdb_id"],
            cast=imdb["cast"],
            runtime=imdb["runtime"],
            countries=imdb["countries"],
            certificates=imdb["certificates"],
            languages=imdb["languages"],
            director=imdb["director"],
            writer=imdb["writer"],
            producer=imdb["producer"],
            composer=imdb["composer"],
            cinematographer=imdb["cinematographer"],
            music_team=imdb["music_team"],
            distributors=imdb["distributors"],
            release_date=imdb['release_date'],
            year=imdb['year'],
            genres=imdb['genres'],
            poster=imdb['poster'],
            plot=imdb['plot'],
            rating=imdb['rating'],
            url=imdb['url'],
            **locals()
        )
    else:
        cap = f"ùñßùñæùóí üëãüèª {message.from_user.mention} üòç\n\n<b><i>üîñTitle : {search}\nüì´ Your Files is Ready Now</i></b>\n\nüó≥Ô∏è ùñ¥ùóâùóÖùóàùñ∫ùñΩùñæùñΩ ùñ°ùóí {message.chat.title}"
    if imdb and imdb.get('poster'):
        try:
            await message.reply_text(text=cap[:1024],
                                      reply_markup=InlineKeyboardMarkup(btn))
        except (MediaEmpty, PhotoInvalidDimensions, WebpageMediaEmpty):
            pic = imdb.get('poster')
            poster = pic.replace('.jpg', "._V1_UX360.jpg")
            await message.reply_text(text=cap[:1024], reply_markup=InlineKeyboardMarkup(btn))
        except Exception as e:
            logger.exception(e)
            await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn))
    else:
        await message.reply_text(cap, reply_markup=InlineKeyboardMarkup(btn))
    if spoll:
        await msg.message.delete()
  
                movielist += [movie.get('title') for movie in imdb_s]
    movielist += [(re.sub(r'(\-|\(|\)|_)', '', i, flags=re.IGNORECASE)).strip() for i in gs_parsed]
    movielist = list(dict.fromkeys(movielist))  # removing duplicates
    if not movielist:
        btn = [[
            InlineKeyboardButton('üìï …™…¥s·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥ üìï', callback_data='tipss')
            ],[   
            InlineKeyboardButton('üîç Íú±·¥á·¥Ä Ä·¥Ñ ú …¢·¥è·¥è…¢ ü·¥á üîç', url=f'https://google.com/search?q={msg.text.replace(" ", "+")}')
        ]]        
        k=await msg.reply("<b>ùñ≤·¥è Ä Ä è ùñ≠·¥è ùñ•…™ ü·¥áùóå ùñ∂·¥á Ä·¥á ùñ•·¥è·¥ú…¥·¥Ö.\n\nùñ¢ ú·¥á·¥Ñ·¥ã ùñ∏·¥è·¥ú Ä ùñ≤·¥ò·¥á ü ü…™…¥…¢ …™…¥ ùñ¶·¥è·¥è…¢ ü·¥á ·¥Ä…¥·¥Ö ùñ≥ Ä è ùñ†…¢·¥Ä…™…¥. ‚ôªÔ∏è\n\nùñ±·¥á·¥Ä·¥Ö ùñ®…¥ùóå·¥õ Ä·¥ú·¥Ñ·¥õ…™·¥è…¥ùóå “ì·¥è Ä  ô·¥á·¥õ·¥õ·¥á Ä ùñ±·¥áùóå·¥ú ü·¥õùóå üëáüèª</b>", reply_markup=InlineKeyboardMarkup(btn))    
        await asyncio.sleep(20)
        await k.delete()
        await msg.delete()
        return
    SPELL_CHECK[msg.id] = movielist
    btn = [[
        InlineKeyboardButton(text=movie.strip(), callback_data=f"spolling#{user}#{k}",)]for k, movie in enumerate(movielist)]
    btn.append([InlineKeyboardButton(text="‚úò ·¥ç·¥úÍú±·¥õ ·¥Ñ ü·¥èÍú±·¥á ‚úò", callback_data=f'spolling#{user}#close_spellcheck')])
    k=await msg.reply("<b>‚úØ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥â‡¥¶‡µç‡¥¶‡µá‡¥∂‡¥ø‡¥ö‡µç‡¥ö ‡¥Æ‡µÇ‡¥µ‡¥ø ‡¥§‡¥æ‡¥¥‡µÜ ‡¥ï‡¥æ‡¥£‡µÅ‡¥®‡µç‡¥® ‡¥µ‡¥≤‡µç‡¥≤‡¥§‡µÅ‡¥Ç ‡¥Ü‡¥£‡µç ‡¥é‡¥ô‡µç‡¥ï‡¥ø‡µΩ.‡¥Ö‡¥§‡¥ø‡µΩ ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï</b>\n\n<b>‚úØ …™ ·¥Ñ·¥è·¥ú ü·¥Ö…¥'·¥õ Íú∞…™…¥·¥Ö ·¥Ä…¥ è·¥õ ú…™…¥…¢  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥Ä·¥õ ·¥Ö…™·¥Ö  è·¥è·¥ú ·¥ç·¥á·¥Ä…¥ ·¥Ä…¥ è ·¥è…¥·¥á ·¥èÍú∞ ·¥õ ú·¥áÍú±·¥á?\n\nüìØ …¥ ô:·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á ·¥ç·¥è·¥†…™·¥á …¥·¥Ä·¥ç·¥á ·¥è…¥ ü è ·¥Ö·¥è…¥·¥õ ·¥úÍú±·¥á  è·¥á·¥Ä Ä  ô·¥ú·¥õ·¥õ·¥è…¥ </b>",
                      reply_markup=InlineKeyboardMarkup(btn))
    await asyncio.sleep(60)
    await k.delete()
    await msg.delete()


async def manual_filters(client, message, text=False):
    group_id = message.chat.id
    name = text or message.text
    reply_id = message.reply_to_message.id if message.reply_to_message else message.id
    keywords = await get_filters(group_id)
    for keyword in reversed(sorted(keywords, key=len)):
        pattern = r"( |^|[^\w])" + re.escape(keyword) + r"( |$|[^\w])"
        if re.search(pattern, name, flags=re.IGNORECASE):
            reply_text, btn, alert, fileid = await find_filter(group_id, keyword)

            if reply_text:
                reply_text = reply_text.replace("\\n", "\n").replace("\\t", "\t")

            if btn is not None:
                try:
                    if fileid == "None":
                        if btn == "[]":
                            await client.send_message(group_id, reply_text, disable_web_page_preview=True)
                        else:
                            button = eval(btn)
                            await client.send_message(
                                group_id,
                                reply_text,
                                disable_web_page_preview=True,
                                reply_markup=InlineKeyboardMarkup(button),
                                reply_to_message_id=reply_id
                            )
                    elif btn == "[]":
                        await client.send_cached_media(
                            group_id,
                            fileid,
                            caption=reply_text or "",
                            reply_to_message_id=reply_id
                        )
                    else:
                        button = eval(btn)
                        await message.reply_cached_media(
                            fileid,
                            caption=reply_text or "",
                            reply_markup=InlineKeyboardMarkup(button),
                            reply_to_message_id=reply_id
                        )
                except Exception as e:
                    logger.exception(e)
                break
    else:
        return False
